plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	//id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	//gekolib

	maven {
		name = 'GeckoLib'
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
		content {
			includeGroup("software.bernie.geckolib")
		}
	}
	//Locki
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}

	maven { url 'https://maven.nucleoid.xyz' } // You should have it

	repositories {
		maven { url "https://maven.shedaniel.me" }
	}


}
//shadowJar {

//}
dependencies {
    // To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "software.bernie.geckolib:geckolib-fabric-${project.minecraft_version}:${geko_version}"
	//cardinal components mod implementation
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-world:${cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-level:${cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${cca_version}"
	//cardinal components jarjar dependencies
	include "org.ladysnake.cardinal-components-api:cardinal-components-world:${cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-level:${cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-base:${cca_version}"
	include "org.ladysnake.cardinal-components-api:cardinal-components-entity:${cca_version}"


	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${REI}"
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${REI}"

	include modApi("teamreborn:energy:${energy_api_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}



}
sourceSets{
	main {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		resources{
			srcDirs+=[
				'src/main/generated'
			]
		}
	}
}
processResources {
	inputs.property "version", project.version;
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This blocks does NOT have the same function as the blocks in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
loom{

	runs{

	datagenClient{
		inherit client
		name "Data Generation"
		vmArg "-Dfabric-api.datagen"
		vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
		//vmArg "-Dfabric-api.datagen.strict-validation"
		vmArg "-Dfabric-api.datagen.modid=${modid}"
		//ideConfigGenerated = true
		runDir "build/datagen"
		//source sourceSets.main

		}
	}
}
