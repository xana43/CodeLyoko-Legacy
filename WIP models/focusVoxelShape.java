Stream.of(
Block.makeCuboidShape(1, 0, 4, 15, 16, 12),
Block.makeCuboidShape(2, 0, 2, 3, 16, 3),
Block.makeCuboidShape(2, 0, 3, 14, 16, 4),
Block.makeCuboidShape(3, 0, 1, 4, 16, 2),
Block.makeCuboidShape(12, 0, 1, 13, 16, 2),
Block.makeCuboidShape(13, 0, 2, 14, 16, 3),
Block.makeCuboidShape(14, 0, 3, 15, 16, 4),
Block.makeCuboidShape(15, 0, 4, 16, 16, 12),
Block.makeCuboidShape(2, 0, 12, 14, 16, 13),
Block.makeCuboidShape(3, 0, 14, 4, 16, 15),
Block.makeCuboidShape(12, 0, 14, 13, 16, 15),
Block.makeCuboidShape(2, 0, 13, 3, 16, 14),
Block.makeCuboidShape(13, 0, 13, 14, 16, 14),
Block.makeCuboidShape(1, 0, 12, 2, 16, 13),
Block.makeCuboidShape(14, 0, 12, 15, 16, 13),
Block.makeCuboidShape(4, 0, 15, 12, 16, 16),
Block.makeCuboidShape(4, 0, 14, 12, 16, 15),
Block.makeCuboidShape(3, 0, 13, 13, 16, 14),
Block.makeCuboidShape(4, 0, 0, 12, 16, 1),
Block.makeCuboidShape(3, 0, 2, 13, 16, 3),
Block.makeCuboidShape(4, 0, 1, 12, 16, 2),
Block.makeCuboidShape(1, 0, 3, 2, 16, 4),
Block.makeCuboidShape(0, 0, 4, 1, 16, 12)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});